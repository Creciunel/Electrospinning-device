#include "main.h"

void vTaskEncoder(void *pvParameters);
void vTaskMotor(void *pvParameters);
void vTaskLCD(void *pvParameters);
void vTaskCommunication(void *pvParameters);
void vTaskTransformer(void *pvParameters);

// Motor constants
uint8_t motorSpeed = 1;       // Viteza motorului
uint8_t motorDirection = LOW; // Direcția motorului

// Transformer variables
uint8_t pwmValue = 0;

// Encoder și LCD
// Create a global pointer for the encoder object
RotaryEncoder encoder(CLK, DT, SW);
LiquidCrystal_I2C lcd(ADDRESS, 16, 2);
MWCSTEPPER tb6600(ENA_PIN, DIR_PIN, PUL_PIN); // Inițializează driverul motorului

struct Flag
{
    uint8_t start = 0; // Starea de start/stop
} flag;


void setup()
{
    Serial.begin(115200);

    // Crearea sarcinilor
    xTaskCreate(vTaskEncoder, "Encoder Task", 256, NULL, 3, NULL);
    xTaskCreate(vTaskMotor, "Motor Task", 128, NULL, 1, NULL);
    xTaskCreate(vTaskLCD, "LCD Task", 128, NULL, 1, NULL);
    xTaskCreate(vTaskCommunication, "Communication Task", 128, NULL, 1, NULL);
    xTaskCreate(vTaskTransformer, "Transformer Task", 128, NULL, 1, NULL);

    // Pornește scheduler-ul FreeRTOS
    vTaskStartScheduler();

    // Setare Timer0 pentru a obține o frecvență de aproximativ 7kHz

    // Setează modul Fast PWM pentru Timer0
    TCCR0A = (1 << WGM00) | (1 << WGM01); // Mod PWM rapid
    TCCR0B = (1 << CS01) | (1 << CS00);   // Prescaler de 64

    // Initializarea LCD
    lcd.init();
    lcd.backlight();

}

void loop() {}

void vTaskEncoder(void *pvParameters)
{
    for (;;)
    {

        vTaskDelay(100 / portTICK_PERIOD_MS); // Întârziere pentru reacții rapide
    }
}

void vTaskMotor(void *pvParameters)
{
    digitalWrite(ENA_PIN, LOW); // Activează driverul

    for (;;)
    {
        if (flag.start)
        {
            tb6600.run(); // Rotește motorul la viteza setată
        }
        else
        {
            tb6600.active(false); // Oprește motorul
        }
        vTaskDelay(10 / portTICK_PERIOD_MS); // Delay pentru reacții rapide
    }
}

void vTaskLCD(void *pvParameters)
{
    for (;;)
    {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("V:" + String(int(voltageValue(analogRead(ADC_PIN)) / 1000.0)));
        lcd.setCursor(5, 0);
        lcd.print("kV RPM:" + String(motorSpeed));

        lcd.setCursor(0, 1);
        lcd.print(motorDirection == HIGH ? "d:F" : "d:B");

        lcd.setCursor(5, 1);
        lcd.print("s:" + String(flag.start));

        vTaskDelay(1000 / portTICK_PERIOD_MS); // Actualizează LCD-ul la fiecare secundă
    }
}

void vTaskTransformer(void *pvParameters)
{

    // Setează modul Fast PWM pentru Timer0
    TCCR0A = (1 << WGM00) | (1 << WGM01); // Mod PWM rapid
    TCCR0B = (1 << CS01) | (1 << CS00);   // Prescaler de 64

    pinMode(PWM_PIN, OUTPUT);

    for (;;)
    {
        analogWrite(PWM_PIN, pwmValue);
        vTaskDelay(1000 / portTICK_PERIOD_MS);
    }
}

void vTaskCommunication(void *pvParameters)
{
    Serial.println("System Initialized\r\n");

    for (;;)
    {
        if (Serial.available() > 0)
        {
            char key = Serial.read();
            int val = Serial.parseInt();

            switch (key)
            {
            case 's':
                flag.start = val;
                digitalWrite(ENA_PIN, flag.start ? LOW : HIGH); // Activează/dezactivează driverul
                break;
            case 'd':
                motorDirection = val ? HIGH : LOW;
                tb6600.set(motorDirection == HIGH ? CLOCKWISE : COUNTERCLOCKWISE, motorSpeed, PULSE); // Setează direcția și viteza
                break;
            case 'm':
                motorSpeed = val;
                break;
            case 'p':
                pwmValue = val;
                if (pwmValue > 255)
                    pwmValue = 255;
                else if (pwmValue < 0)
                    pwmValue = 0;
                Serial.println("command: p, value: " + String(pwmValue));
                break;
            default:
                Serial.println("Wrong command! key: " + String(key) + ", val: " + String(val));
                break;
            }
        }
        vTaskDelay(100 / portTICK_PERIOD_MS);
    }
}

// void checkEncoder()
// {
//     static uint32_t lastCheckTime = 0;

//     if (millis() - lastCheckTime >= ENCODER_DELAY)
//     {
//         lastCheckTime = millis();

//         if (enc.isSingleClick())
//         {
//             flag.start = !flag.start;
//             digitalWrite(ENA_PIN, flag.start ? LOW : HIGH);
//             Serial.println("command: s, value: " + String(flag.start));
//         }
//         else if (enc.isDoubleClick())
//         {
//             motorDirection = !motorDirection;
//             tb6600.set(motorDirection == HIGH ? CLOCKWISE : COUNTERCLOCKWISE, motorSpeed, PULSE); // Setează direcția
//             Serial.println("command: d, value: " + String(motorDirection));
//         }
//         else if (enc.getPosition() == 0)
//         {
//             motorSpeed++;
//             if (motorSpeed > 100)
//                 motorSpeed = 100;
//             Serial.println("command: m, value: " + String(motorSpeed));
//         }
//     }
// }